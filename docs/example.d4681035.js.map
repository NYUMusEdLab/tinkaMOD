{"version":3,"sources":["../src/tinkatop.js","../src/tinkacore.js","../src/tinkamo.js","index.js"],"names":["TinkaTop","id","name","return_types","command_id","command","reading","sense","args","i","length","push","type","value","Button","buttonState","Knob","knobNum","mapToRange","create_float","Slider","sliderNum","Joystick","horizontalInt","horizontalDec","verticalIn","Distance","distNum","Color","red","green","blue","Motor","return_type","console","log","direction","intensityFloat","intensityInt","intensityDecimal","motorMessage","Uint8Array","fullNum","num","in_min","in_max","out_min","out_max","mappedVal","TinkaCore","characteristics","core_ids","connected","Set","disconnected","number_added","eventTypes","number","sensor_connected","sensor","events","add_core","self","who_am_i_handler","who_am_i","bind","addEventListener","startNotifications","then","characteristic","motor","createSpeedMotorMessage","writeValue","remove_core","connect","sensor_id","event","packet","target","buffer","packet_length","slice","new_sensor_id","disconnect_sensor","connect_sensor","_callEventListeners","getSensorName","tinkacore","sensor_name","eventType","func","includes","newEvent","filter","ev","evObj","found","parse_packet","removeEventListener","peripheral_id","has","delete","add","Tinkamo","tinkacores","serviceName","newDeviceID","navigator","bluetooth","requestDevice","filters","optionalServices","device","gatt","bound_disconnect","_on_disconnected","server","getPrimaryService","service","getCharacteristics","_add_tinkacore","tinkamo","catch","error","include_disconnected","tinkaList","Object","values","fList","sort","a","b","t","tinkaWithName","sensorName","tinkaWithSensor","reconnect","newTinkaCore","disconnected_id","disconnect","tinka0","alertText","connectionButton","document","getElementById","example1","example2","example3","example4","example5","volumeSlider","sound","Tone","context","latencyHint","outputVol","Volume","mute","synth","Synth","chain","Master","pitches","randomGenerator","CtrlRandom","oninput","volume","rampTo","e3","e4","e5","className","innerHTML","window","onConnectionCallback","state","resume","e1","getTinkamoList","alert","row","insertRow","cell0","insertCell","cell1","cell2","e2","getByName","randomPitch","triggerAttack","triggerRelease"],"mappings":"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","file":"example.d4681035.js","sourceRoot":"../example","sourcesContent":["// TODO - Add Print Mode\n/**\n * Class that represents a generic TinkaTop.\n * This sets up the shared methods used by all tops.\n * Typically used as an 'unsupported' top.\n */\nclass TinkaTop {\n    /**\n     * Creates an instance of the TinkaTop class\n     */\n    constructor() {\n        this.id = 0;\n        this.name = 'unsupported';\n        this.return_types = ['i'];\n    }\n    /**\n     * Typically what the sensor detects.\n     * The default TinkaTop is not an actual sensor and only returns 0.\n     * @param {number} command_id\n     * @param {number[]} command\n     * @returns {0} Always returns 0\n     */\n    sense(command_id, command) {\n        return 0;\n    }\n\n    /**\n     * Returns the sensor values in the Open Sound Control (OSC) format.\n     * Can range from a list of one values or multiple values depending\n     * on the type of sensor.\n     * @param {number} command_id\n     * @param {number[]} command\n     * @returns {boolean | Object[]} args - a list of formatted OSC arguments\n     * @returns {string} arg.type - the data type\n     * @returns {*} arg.value - the sensor value\n     */\n    get_osc_args(command_id, command) {\n        let reading = this.sense(command_id, command);\n        let args = [];\n\n        if (!reading && !(reading === 0)) { // If false or undefined\n            return false;\n        }\n\n        for (let i=0; i<this.return_types.length; i++) {\n            args.push(\n                {\n                    type: this.return_types[i],\n                    value: reading[i] || reading\n                }\n            )\n        }\n        return args;\n    }\n    /** Get the value of id.\n     *  ID's are determined by the Tinkamo hardware protocol.\n     *  @returns {number}\n     */\n    get_id() {\n        return this.id;\n    }\n\n    /** Get the value of name\n     * @returns {string}\n     */\n    get_name() {\n        return this.name;\n    }\n}\n\n/**\n * Class representing a Button TinkaTop\n * @extends TinkaTop\n */\nclass Button extends TinkaTop {\n    /**\n     * Creates an instance of the Button class.\n     */\n    constructor() {\n        super();\n        this.id = 1;\n        this.name = 'button';\n        this.return_types = ['i'];\n    }\n\n    /**\n     * Returns the state of the button, pressed (1) or depressed (0).\n     * @param {number} command_id\n     * @param {number[]} command\n     * @returns {number}\n     */\n    sense(command_id, command) {\n        let buttonState = command[0];\n        return buttonState;\n    }\n}\n\n/**\n * Class representing a Knob TinkaTop\n * @extends TinkaTop\n */\nclass Knob extends TinkaTop {\n    /**\n     * Creates an instance of the Knob class.\n     */\n    constructor() {\n        super();\n\n        this.id = 2;\n        this.name = 'knob';\n        this.return_types = ['f'];\n    }\n\n    /**\n     * Returns the state of the potentiometer as a float in range -10 to 10.\n     * The mapping from voltage to value was estimated from the original run\n     * of Tinkamo and may need revision.\n     * @param {number} command_id\n     * @param {number[]} command\n     * @returns {number}\n     */\n    sense(command_id, command) {\n        let fullNum = create_float(command);\n\n        // Not quite a perfect mapping, but pretty close\n        let knobNum = mapToRange(fullNum, 0, 3.45, -10, 10);\n\n        return knobNum;\n    }\n}\n\n/**\n * Class representing a Slider TinkaTop\n * @extends TinkaTop\n */\nclass Slider extends TinkaTop {\n    /**\n     * Creates an instance of the Slider class\n     */\n    constructor() {\n        super();\n\n        this.id = 3;\n        this.name = 'knob';\n        this.return_types = ['f'];\n    }\n\n    /**\n     * Returns the state of the potentiometer as a float in range 0 to 10.\n     * @param {number} command_id\n     * @param {number[]} command\n     * @returns {number}\n     */\n    sense(command_id, command) {\n        let sliderReading = 255 - command[0];\n        let sliderNum = mapToRange(sliderReading, 0, 255, 0, 10);\n\n        return sliderNum;\n    }\n}\n\n/**\n * Class representing a Joystick TinkaTop\n * @extends TinkaTop\n */\nclass Joystick extends TinkaTop {\n    /**\n     * Creates an instance of the Joystick class\n     */\n    constructor() {\n        super();\n\n        this.id = 4;\n        this.name = 'joystick';\n        this.return_types = ['f', 'f'];\n    }\n\n    /**\n     * Returns the X and Y positions as distance values from the center\n     * ranging from -10 to 10.\n     * @param {number} command_id\n     * @param {number[]} command\n     * @returns {number[]} an array of size 2 containing x and y\n     */\n    sense(command_id, command) {\n        let horizontalInt = command[0];\n        let horizontalDec = command[1];\n        let verticalInt = command[2];\n        let verticalDec = command[3];\n\n        let horizontalIn = horizontalInt + (horizontalDec/255);\n        let verticalIn = verticalInt + (verticalDec/255);\n\n        let horizontalNum = mapToRange(horizontalIn, 0, 4, -10, 10);\n        let verticalNum = -1 * mapToRange(verticalIn, 0, 4, -10, 10);\n\n        return [horizontalNum, verticalNum];\n    }\n}\n\n/**\n * Class representing a Distance TinkaTop\n * @extends TinkaTop\n */\nclass Distance extends TinkaTop {\n    /**\n     * Creates an instance of the Distance class\n     */\n    constructor() {\n        super();\n\n        this.id = 23;\n        this.name = 'distance';\n        this.return_types = ['f'];\n    }\n\n    /**\n     * When distance of objects are in range, return a number, typically\n     * ranging from about 2 to 60.\n     * When the sensor becomes inaccurate due to objects lying at too great a\n     * distance, it sends a particular string of numbers that we interpret\n     * and return as false.\n     * @param {number} command_id\n     * @param {number[]} command\n     * @returns {number | boolean}\n     */\n    sense(command_id, command) {\n        let distNum = create_float(command);\n\n        // distance sensor sends three messages when it gets out of range\n        // Right now I am returning false to ignore - could return 120\n        if (distNum > 60) {\n            return false;\n        }\n\n        return distNum;\n    }\n}\n\n/**\n * Class representing a Color TinkaTop\n * @extends TinkaTop\n */\nclass Color extends TinkaTop {\n    /**\n     * Creates an instance of the Color class\n     */\n    constructor() {\n        super();\n\n        this.id = 27;\n        this.name = 'color';\n        this.return_types = ['i', 'i', 'i'];\n    }\n\n    /**\n     * Returns an array containing three integers refering to the red, green,\n     * and blue content of a surface captured by the sensor.\n     * The sensor may also send a value indicating that it stopped receiving\n     * color (e.g. when held too far from from a surface) which we interpret\n     * and return as false.\n     * @param {number} command_id\n     * @param {number[]} command\n     * @returns {boolean | number[]} array with three values [red, green, blue]\n     */\n    sense(command_id, command) {\n        let red = command[0];\n        let green = command[1];\n        let blue = command[2];\n        let brightness = command[3]; // Not used - unsure what it is\n\n        // The color sensor seems like it is bugging out and will periodically\n        // flash all black... An extra if-statement prevents this problem...\n        // Hardware bug (feature?) - If all zeros, ignore\n        if (!(red + green + blue)) {\n            return false;\n        }\n\n        return [red, green, blue]\n    }\n}\n\n/**\n * Class representing a Motor TinkaTop.\n * STILL IN PROGRESS AND NOT TOTALLY SUPPORTED YET.\n * @extends TinkaTop\n */\nclass Motor extends TinkaTop {\n    /**\n     * Creates an instance of the Motor class\n     */\n    constructor(){\n        super();\n\n        this.id = 5;\n        this.name = 'motor';\n        this.return_type = ['i', 'f'];\n\n        console.log(\"THIS WORKS\");\n    }\n\n    /**\n     * STILL IN PROGRESS - NOT FULLY IMPLEMENTED OR SUPPORTED\n     * @param {number} command_id\n     * @param {number[]} command\n     * @returns {*}\n     */\n    sense(command_id, command){\n        let direction = command[0];\n        let intensityInt = command[1];\n        let intensityDecimal = command[2];\n        let intensityFloat = create_float([intensityInt, intensityDecimal]);\n        if(intensityFloat != false)\n            return [direction, intensityFloat];\n    }\n\n    /**\n     * Creates a message for the motor to return\n     * @param {number} direction Represents the direction of the motor, out of 255\n     * @param {*} intensityInt The floored integer value of the speed\n     * @param {*} intensityDecimal The decimal value of the speed\n     * @returns {Uint8Array[number]} The motor message\n     */\n    createSpeedMotorMessage(direction, intensityInt, intensityDecimal){\n        var motorMessage = new Uint8Array([90,171, 10,0,0,2,5,0,0,direction, intensityInt, intensityDecimal]);\n        return motorMessage;\n    }\n}\n\n// ----------------------Helper Functions----------------------\n\n/**\n * The byte strings sent by the sensors represent decimal numbers in two\n * positions in their command message.\n * @param {number[]} command\n * @returns {number} The complete floating point number\n */\nfunction create_float(command) {\n    if (command.length != 2) {\n        throw 'Create Float function called on incorrect sensor.';\n        return false;\n    }\n\n    let intNum = command[0];\n    let decNum = command[1];\n    let fullNum = intNum + (decNum/255);\n\n    return fullNum;\n}\n\n//\n/**\n * Simple mapping function. Output number is guaranteed to be within output\n * range.\n * @param {number} num\n * @param {number} in_min\n * @param {number} in_max\n * @param {number} out_min\n * @param {number} out_max\n * @returns {number}\n */\nfunction mapToRange(num, in_min, in_max, out_min, out_max) {\n    let mappedVal = (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n\n    if (mappedVal > out_max) return out_max;\n    if (mappedVal < out_min) return out_min;\n    return mappedVal;\n}\n\nexport { TinkaTop, Button, Knob, Slider, Joystick, Distance, Color, Motor };\n","import {TinkaTop, Button, Knob, Slider, Joystick, Distance, Color, Motor} from './tinkatop.js';\n\n/**\n* **Class representing a Tinkacore.**\n* Currently Supports:\n* - Connection\n*     - ID: 0\n*     - Output: [0|1] string containing name of sensor attached\n* - Button\n*     - ID: 1\n*     - Output: [0|1]\n* - Knob\n*     - ID: 2\n*     - Output: float ranging from -10 to 10\n* - Slider\n*     - ID: 3\n*     - Output: float ranging from 0 to 10\n* - Joystick\n*     - ID: 4\n*     - Output: horizontal float, vertical float ranging from -10 to 10\n* - Distance\n*     - ID: 23\n*     - Output: float ranging from 0 to 20\n* - Color\n*     - ID: 27\n*     - Output: red int, green int, blue int ranging from 0 to 255\n*/\nclass TinkaCore {\n\n    /**\n     * Creates an instance of the Tinkacore class\n     * @param {number} id\n     * @param {Object} characteristics\n     */\n    constructor(id, characteristics) {\n\n        // Static Variables\n        TinkaCore.core_ids = TinkaCore.core_ids || {\n            connected: new Set([]),\n            disconnected: new Set([])\n        }\n        TinkaCore.number_added = TinkaCore.number_added || 0;\n\n        TinkaCore.eventTypes = ['*', 'sensor change', 'reading', 'button',\n                                'knob', 'slider', 'joystick', 'distance',\n                                'color'];\n\n        // Instance Variables\n        // Bluetooth\n        this.characteristics = characteristics;\n\n        // Core\n        this.id = id;\n        this.number = TinkaCore.number_added;\n        this.name = 'tinka' + TinkaCore.number_added;\n        this.connected = true;\n\n        // Sensor\n        this.sensor_connected = false;\n        this.sensor = null;\n        this.reading = {};\n\n        // Event Listeners\n        // [ {'eventType': eventType, 'func': func, 'args': args} ]\n        this.events = [];\n\n        TinkaCore.add_core(this.id);\n    }\n\n    // ----------- Connection Methods -----------\n\n    /**\n     * Uses the Chrome Bluetooth API to connect the browser to a TinkaCore\n     * and begin subsribing to messages sent by the core.\n     *\n     * In Progress - Sends an initial message to the TinkaCore to determine\n     * its top.\n     * @returns {boolean}\n     */\n    connect() {\n        let self = this;\n\n        self.who_am_i_handler = self.who_am_i.bind(self);\n        self.characteristics[0].addEventListener('characteristicvaluechanged',\n                                                 self.who_am_i_handler);\n\n        self.characteristics[0].startNotifications().then(function(characteristic) {\n\n        // Does it make sense to instantiate a new motor instance here?\n\t    let motor = new Motor();\n\t    let motorMessage = motor.createSpeedMotorMessage(0,3,0);\n            self.characteristics[1].writeValue(motorMessage);\n        });\n\n        return true;\n    }\n    /**\n     * Called when a Tinkacore is turned off or the Bluetooth connection is\n     * otherwise lost.\n     *\n     * At the moment, this function is not meant to be called by the user\n     * since it does not stop subscription to sensor messages.\n     * @returns {boolean}\n     */\n    disconnect() {\n        this.connected = false;\n        TinkaCore.remove_core(this.id);\n        return false;\n    }\n\n    /**\n     * Called when a disconnected sensor is reconnected.\n     * At the moment, it simply calls the connect function.\n     * @param {Object} characteristics\n     * @returns {boolean}\n     */\n    reconnect(characteristics) {\n        let self = this;\n\n        console.log('Reconnecting');\n        self.characteristics = characteristics;\n        TinkaCore.add_core(this.id);\n        this.connected = true;\n\n        self.connect();\n        return true;\n    }\n\n    /**\n     * Determines a sensor based on the sensor id, the appropriate\n     * TinkaTop and instantiates a new TinkaTop instance.\n     *\n     * Unsupported TinkaTops (e.g. LED Grid) are set to an instance of the\n     * of the generic TinkaTop class.\n     * @param {number} sensor_id\n     * @returns {TinkaTop}\n     */\n    connect_sensor(sensor_id) {\n        switch (sensor_id) {\n        case 1:\n            this.sensor = new Button();\n            break;\n        case 2:\n            this.sensor = new Knob();\n            break;\n        case 3:\n            this.sensor = new Slider();\n            break;\n        case 4:\n            this.sensor = new Joystick();\n            break;\n        case 5:\n            this.sensor = new Motor();\n            break;\n        case 23:\n            this.sensor = new Distance();\n            break;\n        case 27:\n            this.sensor = new Color();\n            break;\n        default:\n            this.sensor = new TinkaTop();\n            console.log('not yet implemented');\n        }\n        this.sensor_connected = true;\n        console.log('Sensor connected: ', this.sensor.name);\n\n        return this.sensor;\n    }\n    /**\n     * Called when a TinkaTop is taken off of a TinkaCore.\n     * @returns {boolean}\n     */\n    disconnect_sensor() {\n        this.sensor_connected = false;\n        this.sensor = null;\n\n        console.log('Sensor disconnected');\n        return false;\n    }\n\n    // ----------- Sensor Methods -----------\n\n    /**\n     * TinkaCores send byte strings of different lengths to indicate an\n     * important event like a sensor reading or connection.\n     * - (See the protocols folder for more info.)\n     *\n     * This is the main parser function that unpacks the byte string,\n     * interprets its length and meaning, and calls the appropriate functions.\n     *\n     * User defined event listeners are called here after messages are\n     * successfully parsed.\n     * @param {Object} event\n     * @returns {boolean} - true if interpretable, false otherwise\n     */\n    parse_packet(event) {\n        let self = this;\n        let packet = new Uint8Array(event.target.value.buffer);\n\n        // Correctly formed packets should have at least length 10\n        if (packet.length < 10) {\n            console.log('Error: Invalid packet length; too short');\n            return false;\n        }\n\n        let packet_length = packet[2];\n        let sensor_id = packet[6];\n        let command_id = packet[8];\n        let command = packet.slice(9);\n\n        switch (sensor_id) {\n            case 0: // Connect/Disconnect\n                let new_sensor_id = command[0];\n                if (new_sensor_id == 255) { this.disconnect_sensor(); }\n                else { self.connect_sensor(new_sensor_id); }\n\n                this._callEventListeners({type: 'sensor change',\n                                         sensor: this.getSensorName(),\n                                         value: this.sensor_connected,\n                                         tinkacore: this});\n                break;\n            default:\n                if (!this.sensor_connected) { this.connect_sensor(sensor_id); }\n                if (sensor_id != this.sensor.id) { this.connect_sensor(sensor_id); }\n\n                else {\n                    let reading = this.sensor.sense(command_id, command);\n                    this.reading[this.sensor.name] = reading;\n                    console.log(this.name + ': ' + this.getSensorName() + ': ', reading);\n\n                    // new - Iterate through event list\n                    this._callEventListeners({type: 'reading',\n                                             sensor: this.getSensorName(),\n                                             value: reading,\n                                             tinkacore: this});\n                }\n        }\n    }\n\n    /**\n     * User called function to request the most recent value picked up by a\n     * sensor.\n     * - Return type depends on the sensor requested.\n     * - False if that sensor has not been used yet.\n     * @param {string} sensor_name\n     * @returns {number | number[] | false}\n     */\n    getLastReading(sensor_name) {\n        if (this.reading[sensor_name]) {\n            return this.reading[sensor_name]\n        }\n        else { return false; }\n    }\n\n    /**\n     * Getter for the name of the sensor.\n     * @returns {string}\n     */\n    getSensorName() {\n        if (this.sensor_connected) return this.sensor.name;\n        else return 'none';\n    }\n\n    // ----------- Event Listeners -----------\n\n    /**\n     * Function allowing the user to define custom event listeners to be called\n     * when a TinkaCore instance triggers an event. Events are called in the\n     * order with which they were added.\n     *\n     * eventType must be one of the following:\n     * - '*' - any message sent by a TinkaCore\n     * - 'sensor change' - When a tinkatop is removed or added\n     * - 'reading' - when any sensor triggers a sensor reading\n     * - 'button', 'knob', 'slider', 'joystick', 'distance', 'color'\n     *\n     * @param {string} eventType\n     * @param {function} func\n     * @param {...*} args\n     * @returns {boolean}\n     */\n     addEventListener(eventType, func, ...args) {\n        if (typeof func !== \"function\") {\n            throw \"second argument must be a valid function\";\n            return false;\n        }\n        if (!TinkaCore.eventTypes.includes(eventType)) {\n            throw \"event type must be valid\"; // list event types\n            return false;\n        }\n\n        // Callbacks are not bound to the TinkaCore\n        let newEvent = {'eventType': eventType, 'func': func, 'args': args};\n        this.events.push(newEvent);\n        return true;\n    }\n\n    /**\n     * Removes a callback function from the events list preventing further calls.\n     *\n     * @param {string} eventType\n     * @param {function} func\n     * @returns {boolean}\n     */\n    removeEventListener(eventType, func) {\n        this.events = this.events.filter(ev => (ev.eventType != eventType || ev.func != func));\n        return true;\n    }\n\n    /**\n     * Iterates through the events list and upon ANY TinkaCore event, calls\n     * the relevent functions.\n     *\n     * @param {string} event\n     * @returns {boolean}\n     * @private\n     */\n    _callEventListeners(event) {\n        for (let evObj of this.events) {\n            if (\n                evObj.eventType == '*' ||\n                (evObj.eventType == 'reading' && event.type == 'reading') ||\n                (evObj.eventType == event.sensor) ||\n                (evObj.eventType == 'sensor change' && event.type == 'sensor change')\n            ) evObj.func(event, ...evObj.args);\n        }\n    }\n\n    /**\n     * Function that gets called right when a Tinkacore is first connected and\n     * begins subscribing to messages. Determines if it is a motor and what\n     * sensor if any is currently connected.\n     * @param {Object} event\n     * @returns {boolean}\n     * @private\n     */\n    who_am_i(event) {\n        let self = this;\n        let found = false;\n        let packet = new Uint8Array(event.target.value.buffer);\n\n        // We are a motor\n        // Motor responds with whether the message succeeded or failed\n        if (packet.length == 10) {\n            console.log('Motor!');\n            found = true;\n        }\n\n        // We are a sensor\n        // Core responds with a connect/disconnect message (almost)\n        else if (packet.length == 13) {\n            console.log('TinkaCore!');\n            packet[6] = 0; // Swap the 5 with a 0\n            found = true;\n        }\n\n        if (found) {\n            self.parse_packet(event);\n            self.characteristics[0].removeEventListener('characteristicvaluechanged',\n                        self.who_am_i_handler);\n\n            // If 'self' is not bound here. Then the event itself becomes 'self'\n            self.characteristics[0].addEventListener('characteristicvaluechanged',\n                        self.parse_packet.bind(self));\n        }\n\n        return found;\n    }\n\n    // ----------- Static Methods -----------\n\n    /**\n     * Keeps track of the Tinkacores that have been added.\n     * Adds a TinkaCore ID to the connected set, and removes it from the\n     * disconnected set if it has already been connected.\n     * @param {string} peripheral_id\n     * @returns {string}\n     * @private\n     */\n    static add_core(peripheral_id) {\n        // Check if TinkaCore is undefined\n        if (TinkaCore.core_ids.disconnected.has(peripheral_id)) {\n            TinkaCore.core_ids.disconnected.delete(peripheral_id);\n        }\n        else {\n            TinkaCore.number_added += 1;\n        }\n        TinkaCore.core_ids.connected.add(peripheral_id);\n        return peripheral_id;\n    }\n\n    /**\n     * Moves a TinkaCore ID from the connected set to the disconnected set.\n     * @param {string} peripheral_id\n     * @returns {string}\n     * @private\n     */\n    static remove_core(peripheral_id) {\n        TinkaCore.core_ids.connected.delete(peripheral_id);\n        TinkaCore.core_ids.disconnected.add(peripheral_id);\n        return peripheral_id;\n    }\n\n    /**\n     * In process function - forms and sends a message to a Tinkacore\n     * that controls the motor. It can also be used to request the type of\n     * TinkaTop indicated in the device's response.\n     * @param {number} direction\n     * @param {number} intensityInt\n     * @param {number} intensityDecimal\n     * @returns {number[]}\n     */\n    static createMessage(direction, intensityInt, intensityDecimal){\n        let motorMessage = new Uint8Array([90,171, 10,0,0,2,5,0,0,direction, intensityInt, intensityDecimal]);\n        return motorMessage;\n    }\n}\n\nexport { TinkaCore };\n","// TODO - Support on disconnect callback...\nimport { TinkaCore } from './tinkacore.js';\n\n/**\n* **Class for all Tinkamo**\n* Essentially a bucket containing all Tinkamo and functions handling when\n* TinkaCores are connected and disconnected to the browser.\n*\n* There really should only be one instance of Tinkamo per application.\n*/\nexport default class Tinkamo {\n\n    /**\n     * Creates an instance of the Tinkamo class.\n     */\n    constructor() {\n        // Static Variables\n        Tinkamo.eventTypes = ['*', 'connect', 'disconnect'];\n\n        // Instance Variables\n        this.tinkacores = {};\n        this.serviceName = 0xfffa;\n\n        this.events = [];\n\n        // Tracking of TinkaCores\n        TinkaCore.core_ids = TinkaCore.core_ids || {\n            connected: new Set([]),\n            disconnected: new Set([])\n        }\n    }\n\n    /**\n     * Primary method for connecting a new TinkaCore to the browser using\n     * the Chrome bluetooth api.\n     *\n     * Due to browser security, this function cannot be called directly,\n     * and instead must be a called from user action like pressing a button.\n     *\n     * @example\n     *\n     * let tinkamo = new Tinkamo();\n     * let connectionButton = document.getElementById('connectionButton');\n     * connectionButton.onclick = function() { tinkamo.connect(); }\n     */\n    connect(){\n        let self = this;\n        console.log('Requesting Bluetooth Device...');\n        let newDeviceID; // Hold on to the device ID for later\n        navigator.bluetooth.requestDevice({\n    \tfilters : [{\n    \t    name: 'Tinka',\n    \t}],\n    \toptionalServices: [self.serviceName]\n        })\n    \t.then(device => {\n    \t    console.log('> Found ' + device.name);\n    \t    console.log('> Id: ' + device.id);\n    \t    console.log('> Connected: ' + device.gatt.connected);\n\n            // In order to maintain Tinkamo as the parent when this is called\n            // within the event listener, we must explicitly bind it\n            let bound_disconnect = (function(event) {\n                self._on_disconnected(event)\n            }).bind(self);\n    \t    device.addEventListener('gattserverdisconnected', bound_disconnect);\n\n            newDeviceID = device.id;\n            return device.gatt.connect()\n    \t})\n    \t.then(server => {\n            console.log(server);\n    \t    return server.getPrimaryService(self.serviceName);\n    \t})\n    \t.then(service => {\n                console.log('Tinka services...');\n                console.log(service);\n                return service.getCharacteristics();\n    \t})\n    \t.then(characteristics => {\n    \t    console.log('Tinka characteristics...');\n            return self._add_tinkacore(newDeviceID, characteristics);\n    \t})\n        .then(tinkacore => {\n            this._callEventListeners({type: 'connect', tinkacore: tinkacore, tinkamo: this});\n            console.log('Optional user callback')\n        })\n    \t.catch(error => {\n    \t    console.log('Error', error);\n    \t});\n    }\n\n    // ----------- Events -----------\n\n    /**\n     * Function allowing the user to define custom event listeners to be called\n     * when a Tinkamo instance triggers an event. Events are called in the\n     * order with which they were added.\n     *\n     * eventType must be one of the following:\n     * - '*' - connect or disconnect\n     * - 'connect'\n     * - 'disconnect'\n     *\n     * @param {string} eventType\n     * @param {function} func\n     * @param {...*} args\n     * @returns {boolean}\n     */\n    addEventListener(eventType, func, ...args) {\n        if (typeof func !== \"function\") {\n            throw \"second argument must be a valid function\";\n            return false;\n        }\n        if (!Tinkamo.eventTypes.includes(eventType)) {\n            throw \"event type must be valid\"; // list event types\n            return false;\n        }\n\n        let newEvent = {'eventType': eventType, 'func': func, 'args': args};\n        this.events.push(newEvent);\n        return true;\n    }\n\n    /**\n     * Removes a callback function from the events list preventing further calls.\n     *\n     * @param {string} eventType\n     * @param {function} func\n     * @returns {boolean}\n     */\n    removeEventListener(eventType, func) {\n        this.events = this.events.filter(ev => (ev.eventType != eventType || ev.func != func));\n        return true;\n    }\n\n    /**\n     * Iterates through the events list and upon ANY TinkaCore event, calls\n     * the relevent functions.\n     *\n     * @param {string} event\n     * @returns {boolean}\n     * @private\n     */\n    _callEventListeners(event) {\n        for (let evObj of this.events) {\n            if (evObj.eventType == '*' || evObj.eventType == event.type)\n                evObj.func(event, ...evObj.args);\n        }\n    }\n\n    // ----------- Getters -----------\n\n    /**\n     * Get a list of TinkaCores. By default it returns tinkacores that have\n     * been disconnected as well.\n     *\n     * TinkaCores are listed in the order with which they were originally\n     * connected.\n     *\n     * @param {boolean} [include_disconnected=true]\n     * @returns {[Tinkacore]}\n     */\n    getTinkamoList(include_disconnected=true) {\n        let tinkaList = Object.values(this.tinkacores);\n        tinkaList.sort((a, b) => a.number - b.number);\n        let fList = tinkaList.filter(t => (include_disconnected || t.connected));\n        return fList;\n    }\n\n    /**\n     * Gets a tinkacore based on its built-in ID\n     * @returns {Tinkacore}\n     */\n    getByID(id) {\n        return this.tinkacores[id];\n    }\n\n    /**\n     * Returns a list of tinkacores with included name.\n     * Empty list if the name is not found\n     * @returns {[Tinkacore]}\n     */\n    getByName(name) {\n        // We need to decide if names are guaranteed to be unique\n        let tinkaList = Object.values(this.tinkacores);\n        let tinkaWithName = tinkaList.filter(t => t.name == name);\n        return tinkaWithName;\n    }\n\n    /**\n     * Returns a list of tinkacores with currently attached top.\n     * Empty list if none have that top.\n     * @returns {[Tinkacore]}\n     */\n    getBySensor(sensorName) {\n        // May want to change the word sensor to top or tinkaTop\n        let tinkaList = Object.values(this.tinkacores);\n        let tinkaWithSensor = tinkaList.filter(t => t.sensor.name == sensorName);\n        return tinkaWithSensor;\n    }\n\n    // ----------- Setters -----------\n\n    // Get and set name?\n\n    /**\n     * Creates a new TinkaCore instance and uses TinkaCore functions\n     * to ensure it is tracked correctly.\n     *\n     * @returns {[Tinkacore]}\n     * @private\n     */\n    _add_tinkacore(id, characteristics) {\n        if (TinkaCore.core_ids.disconnected.has(id)) {\n            this.tinkacores[id].reconnect(characteristics);\n        }\n        else {\n            let newTinkaCore = new TinkaCore(id, characteristics);\n            newTinkaCore.connect();\n            this.tinkacores[id] = newTinkaCore;\n        }\n\n        return this.tinkacores[id];\n    }\n\n    // Should only be used as a callback function\n    /**\n     * Callback function triggered when a TinkaCore is turned off or becomes\n     * otherwise disconnectd.\n     *\n     * @returns {[Tinkacore]}\n     * @private\n     */\n    _on_disconnected(event) {\n        let device = event.target;\n        let disconnected_id = device.id;\n\n        this.tinkacores[disconnected_id].disconnect();\n\n        this._callEventListeners({type: 'disconnect',\n                                  tinkacore: this.tinkacores[disconnected_id],\n                                  tinkamo: this});\n    }\n}\n","// Tinkamo - Interactive getting started guide\n// Willie Payne\n// 2019\n\nimport Tinkamo from \"../src/tinkamo.js\";\n\n// Variables to use in demo code\nlet tinkamo = new Tinkamo();\nlet tinka0;\nlet alertText = \"Oops - Please make sure to connect a Tinkamo before trying one of the examples.\"\n\n// HTML Elements to interact with\nlet connectionButton = document.getElementById('connectionButton');\nlet example1 = document.getElementById('example1');\nlet example2 = document.getElementById('example2');\nlet example3 = document.getElementById('example3');\nlet example4 = document.getElementById('example4');\nlet example5 = document.getElementById('example5');\nlet volumeSlider = document.getElementById('volume_slider');\n\n// Variables for Tone example\nlet sound = false;\nTone.context.latencyHint = 'fastest';\nlet outputVol = new Tone.Volume(-100);\noutputVol.mute = true;\nlet synth = new Tone.Synth().chain(outputVol, Tone.Master);\n// let synth = new Tone.Synth().toMaster();\nlet pitches = ['F3', 'A3', 'A#3', 'C4', 'E4',\n               'F4', 'A4', 'A#4', 'C5', 'E5', 'F5'];\nlet randomGenerator = new Tone.CtrlRandom({\n\t'min': 0,\n\t'max': pitches.length,\n\t'integer': true\n});\n\nvolumeSlider.oninput = function() {\n    if (this.value == -20) {\n        outputVol.mute = true;\n    }\n    else {\n        outputVol.mute = false;\n        outputVol.volume.rampTo(this.value, 0.01);\n    }\n}\n\ntinkamo.addEventListener('connect', function(event) {\n    // Set up event listeners used as examples.\n    if (event.tinkacore.name == 'tinka0') {\n        tinka0 = event.tinkacore;\n        e3();\n        e4();\n        e5();\n    }\n    connectionButton.className = \"waves-effect waves-light btn-large blue darken-1\";\n    connectionButton.innerHTML = \"<i class='material-icons left'>bluetooth_connected</i>Connect another one!\";\n}, connectionButton);\n\ntinkamo.addEventListener('disconnect', function(event) {\n    if (event.tinkacore.name == 'tinka0') {\n        connectionButton.className = \"waves-effect waves-light btn-large red darken-1\";\n        connectionButton.innerHTML = \"<i class='material-icons left'>bluetooth</i>Connect your Tinkamo!\";\n    }\n})\n\n// Callback functions\nwindow.onConnectionCallback = function() {\n    if (Tone.context.state !== 'running') {\n        Tone.context.resume();\n    }\n    tinkamo.connect();\n}\n\nwindow.e1 = function() {\n    let tinkaList = tinkamo.getTinkamoList();\n    if (!tinkaList.length) {\n        alert(alertText);\n        return false;\n    }\n\n    example1.innerHTML = '';\n    for (let i in tinkaList) {\n        let row = example1.insertRow(i);\n\n        let cell0 = row.insertCell(0);\n        let cell1 = row.insertCell(1);\n        let cell2 = row.insertCell(2);\n\n        cell0.innerHTML = tinkaList[i].name;\n        cell1.innerHTML = tinkaList[i].connected;\n        cell2.innerHTML = tinkaList[i].getSensorName();\n    }\n    return true;\n}\n\nwindow.e2 = function() {\n    let tinkaList = tinkamo.getByName('tinka0');\n    if (!tinkaList.length) {\n        alert(alertText);\n        return false;\n    }\n\n    example2.innerHTML = '';\n    for (let i in tinkaList) {\n        let row = example2.insertRow(i);\n\n        let cell0 = row.insertCell(0);\n        let cell1 = row.insertCell(1);\n        let cell2 = row.insertCell(2);\n\n        cell0.innerHTML = tinkaList[i].name;\n        cell1.innerHTML = tinkaList[i].connected;\n        cell2.innerHTML = tinkaList[i].getSensorName();\n    }\n    return true;\n}\n\nwindow.e3 = function() {\n    tinka0.addEventListener('sensor change', function(event) {\n        example3.innerHTML = '';\n        let row = example3.insertRow(0);\n\n        let cell0 = row.insertCell(0);\n        let cell1 = row.insertCell(1);\n\n        cell0.innerHTML = event.value;\n        cell1.innerHTML = event.sensor;\n    });\n}\n\nwindow.e4 = function() {\n    tinka0.addEventListener('reading', function(event) {\n        example4.innerHTML = '';\n        let row = example4.insertRow(0);\n\n        let cell0 = row.insertCell(0);\n        let cell1 = row.insertCell(1);\n\n        cell0.innerHTML = event.sensor;\n        cell1.innerHTML = event.value;\n    });\n}\n\nwindow.e5 = function() {\n    tinka0.addEventListener('button', function(event) {\n        if (event.value) {\n            let randomPitch = pitches[randomGenerator.value];\n            synth.triggerAttack(randomPitch);\n            example5.innerHTML = 'button was pressed down';\n        }\n        else {\n            synth.triggerRelease();\n            example5.innerHTML = 'button was let up';\n        }\n    });\n}\n"]}